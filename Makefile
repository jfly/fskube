CC=clang++
CFLAGS=-Wall -g -std=c++11
INC=-I/usr/include/python3.3m

TESTER_OBJS := fskube.o tester.o
PYTHONWRAPPER_OBJS := fskube.o fskube_wrap.o

.PHONY: all check clean

# Autogenerated dependencies trick from
# http://scottmcpeak.com/autodepend/autodepend.html
-include $(TESTER_OBJS:.o=.d)
-include $(PYTHONWRAPPER_OBJS:.o=.d)

tester: $(TESTER_OBJS)
	$(CC) $(TESTER_OBJS) -o $@

_fskube.so: $(PYTHONWRAPPER_OBJS)
	$(CC) -shared $(PYTHONWRAPPER_OBJS) -o $@

%.o: %.cpp
	$(CC) -c -fPIC $(CFLAGS) $(INC) $*.cpp -o $*.o
	$(CC) -MM $(CFLAGS) $(INC) $*.cpp > $*.d

# These targets don't actually depend on fskube.o, but they
# should get remade whenever fskube.o is remade, so it's listed
# as a dependency.
fskube.py fskube_wrap.cpp fskube_wrap.h: fskube.o fskube.i
	swig -python -c++ -o fskube_wrap.cpp fskube.i

# Similar trick as above: fskube.js doesn't actually depend on
# tester, but every time tester gets remade, fskube.js should be
# remade as well.
build/fskube.js: tester
	emcc $(CFLAGS) tester.cpp fskube.cpp -o fskube.js

all: tester fskube.js _fskube.so

check: _fskube.so
	./test.py

clean:
	#rm -f test/signal.data
	rm -f *.o *.so
	rm -f tester
	rm -f fskube.js
	rm -f fskube.js.map
	rm -f fskube_wrap.cpp
	rm -f fskube.py

#<<<
serve:
	python -m SimpleHTTPServer

test/signal.data: scripts/*.js test/*.js
	node test/modemtest.js

graph: test/signal.data
	gnuplot signal.plot
#<<<
